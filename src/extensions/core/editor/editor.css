/* =======================================================
 *                        General
 * ======================================================= */

.disable-transition,
.disable-transition * {
  transition: none !important;
}

/* =======================================================
 *                        Editor
 *
 * All panes exist within this element, which takes up the
 * full size of the screen and does not scroll.
 * ======================================================= */

#editor {
  position: relative;
  display: flex;
  white-space: nowrap;
  height: 100%;
  width: 100%;
  overflow: hidden;
  -webkit-transform: translate3d(0, 0, 0);
  -webkit-backface-visibility: hidden;
  -webkit-perspective: 1000;
}

/* When resizing, keep the resize cursor enabled even if
 * the mouse wanders off the splitter a little. */
#editor.resize-x,
#editor.resize-x * {
  cursor: e-resize !important;
}

#editor.resize-y,
#editor.resize-y * {
  cursor: n-resize !important;
}

/* =======================================================
 *                         Panes
 *
 * Panes hold content of various types within the editor
 * (mostly text), and more than one can be open at a time.
 * Panes are divided by splitter elements, which allow
 * then to be resized.
 *
 * NOTE: Panes are the most interacted-with element in the
 * application. It is especially important that they
 * remain fluid and jank-free.
 * ======================================================= */

.pane {
  position: relative;
  display: flex;
  flex-flow: column;
  width: 100%;
  height: 100%;
  border-width: 0;
  border-style: solid;
  border-color: transparent;
  background: rgb(250, 250, 250);
  -webkit-user-select: none;
}

#editor > .pane {
  transition: width   500ms cubic-bezier(0.3, 0.4, 0.3, 1),
              opacity 300ms ease-in;
}

.vertical-splitter-pane > .pane {
  transition: height  500ms cubic-bezier(0.3, 0.4, 0.3, 1),
              opacity 300ms ease-in;
}

/* =======================================================
 *                      Input Pane
 * ======================================================= */

/* Font options are set in user preferences, based upon filetype.
 * For defaults, see editor.js or check out the preference file. */
.pane.input .input-area {
  position: relative;
  width: 100%;
  height: 100%;
  margin: 0 auto;
  background: none;
  z-index: 0;
}

.pane.input .input-area.filetype-mkd {
  max-width: 800px;
}

/* =======================================================
 *                       Preview Pane
 * ======================================================= */

.pane.preview .preview-area {
  height: 100%;
  white-space: pre-wrap;
  overflow-y: auto;
  word-wrap: break-word;
}

/* =======================================================
 *                     Pane Overlay
 *
 * This element fits over the pane exactly and is used to
 * fade content in and out at various times, such as
 * during link management mode or when the pane first
 * opens.
 * ======================================================= */

.pane-overlay {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0;
  background: rgb(250, 250, 250);
  transition: opacity 400ms ease;
  pointer-events: none;
  z-index: 4;
}

.pane.opening:not(.resize-instant) .pane-overlay {
  transition: none;
  opacity: 1;
}

.managing-links .pane-overlay {
  opacity: 0.95;
  pointer-events: auto;
}

/* =======================================================
 *                      Command Bar
 *
 * The command bar exists at the bottom of a pane, and is
 * there to accept user input (commands). It is not
 * persistant, and only exists when the user toggle it.
 * ======================================================= */

.command-bar {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  min-height: 1.6em;
  padding: 2px 5px 2px 25px;
  border-top: 5px solid #000;
  outline: none;
  font-size: 20px;
  font-family: Consolas;
  font-weight: bold;
  line-height: 1.6;
  white-space: normal;
  background: rgb(250, 250, 250);
  z-index: 1;
}

.managing-links .command-bar {
  z-index: 4;
}

.command-bar::before {
  content: ">";
  position: absolute;
  font-size: 20px;
  line-height: 1.6em;
  top: 0px;
  left: 5px;
}

/* Shift it over to align with horizontal splitter. */
#editor > .pane:not(:first-child) .command-bar {
  left: -5px;
}

/* =======================================================
 *                        Splitters
 *
 * Splitters exist between panes and can be dragged to
 * resize the panes on either side. There are two types of
 * splitters: vertical and horizontal. Vertical splitters
 * separate two panes stacked vertically, while horizontal
 * splitters separate two panes side by side to each other.
 * Vertical splitters are only present in vertical split
 * panes.
 *
 * This implementation is particularly hack-ish, as it
 * requires the pane next to the splitter to have a border
 * equal in width to the splitter's size. The splitter is
 * then offset into this space. This method is necessary
 * for now, as the pane implementation is percentage-based.
 * ======================================================= */

.splitter {
  position: relative;
  display: inline-block;
  border-color: black;
  border-style: solid;
  box-sizing: content-box;
}

.splitter-horizontal {
  width: 5px;
  height: 100%;
  border-width: 0 0 0 1px;
  vertical-align: top;
  cursor: e-resize;
  transition: width 500ms ease-in, opacity 200ms ease-in 300ms;
  z-index: 2;
}

.splitter-vertical {
  width: 100%;
  height: 5px;
  display: block;
  margin-left: -5px;
  padding-right: 5px;
  border-width: 1px 0 0;
  cursor: n-resize;
  transition: height 500ms ease-in, opacity 200ms ease-in 300ms;
  z-index: 3;
}

/* =======================================================
 *                        Title Bar
 *
 * The title bar sits at the top of each pane, and both
 * displays the title of the pane's buffer and houses the
 * link bar.
 * ======================================================= */

.title-bar {
  display: flex;
  width: 100%;
  height: 24px;
  padding: 2px 0 5px;
  box-sizing: content-box;
  font-size: 17px;
  font-family: Cousine;
  line-height: 24px;
  background: rgb(250, 250, 250);
  transition: padding-top ease-in 500ms;
  z-index: 1;
  order: -1; /* Should be at the top of the pane. */
}

/* Add a little more padding to panes not preceded by a vertical splitter. */
#editor > .pane:not(.vertical-splitter-pane) .title-bar,
.vertical-splitter-pane > .pane:first-child .title-bar {
  padding-top: 7px;
}

.title-bar .title {
  width: 100%;
  text-align: center;
  vertical-align: middle;
  text-overflow: ellipsis;
  overflow: hidden;
}

.info-bar { order: 0; }
.title-bar .title { order: 1; }
.link-bar { order: 2; }

.info-bar,
.link-bar {
  height: 100%;
  display: flex;
  flex-shrink: 0;
  align-items: center;
}

.info-bar > *,
.link-bar > * {
  margin: 0 10px;
  z-index: 3;
}

.status-light {
  height: 14px;
  width: 14px;
  border-radius: 100px;
  transition: box-shadow 500ms ease-in,
              background-color 500ms ease-in;
  background: rgb(200, 200, 200);
}

.pane:focus .status-light,
.pane.focus .status-light {
  background: rgb(0, 173, 255);  
  box-shadow: inset 0px 1px 0px 0px rgba(250, 250, 250, 0.2),
                    0px 0px 3px 2px rgba(0, 173, 255, 0.2); 
}

.link-button {
  background: url("src/assets/images/link-icon.png");
  width: 22px;
  height: 10px;
  opacity: 0.3;
  pointer-events: none;
}

.pane.has-link .link-button {
  opacity: 1;
  pointer-events: auto;
}

.pane-number {
  position: absolute;
  bottom: 0;
  left: 0;
  height: 35px;
  padding: 0 15px;
  font-family: Cousine;
  font-size: 17px;
  line-height: 35px;
  text-align: center;
  color: #ccc;
  background: rgba(250, 250, 250, 0.95);
  transition: opacity 300ms ease;
}

#editor:not(.managing-links) .pane:focus .pane-number,
#editor:not(.managing-links) .pane.focus .pane-number {
  opacity: 0;
}

.managing-links .pane-number {
  z-index: 4;
}

/* Shift it over to align with the horizontal splitter. */
#editor > .pane:not(:first-child) .pane-number {
  left: -5px;
}

/* =======================================================
 *               Panes - Opening and Closing 
 * ======================================================= */

.pane.closing {
  opacity: 0;
}

#editor > .pane.closing {
  width: 0 !important; /* Override inline style set with js. */
}

.vertical-splitter-pane > .pane.closing {
  height: 0 !important; /* Override inline style set with js. */
}

.splitter-horizontal.closing {
  width: 0;
  opacity: 0;
}

.splitter-vertical.closing {
  height: 0;
  opacity: 0;
}

.vertical-splitter-pane .pane.closing:first-child + .splitter + .pane .title-bar {
  padding-top: 7px;
}

/* Reset properties to their minimum values instantly. The correct
 * values will be transitioned back in when the class is removed. */
.pane.reset-layout {
  transition: none !important; /* Override inline style set with js. */
  opacity: 0;
}

#editor > .pane.reset-layout {
  width: 0;
}

.vertical-splitter-pane > .pane.reset-layout {
  height: 0;
}

.vertical-splitter-pane > .pane.reset-layout > .title-bar {
  transition: none;
  padding-top: 2px;
}

/* =======================================================
 *                        Linking
 *
 * Panes can be linked together so that they both work
 * with the same buffer. When creating or viewing a link,
 * link lines are used to show the association between
 * panes. End nodes on a link line (created using ::before
 * and ::after pseudo-elements) show the direction and
 * state of a link.
 *
 * For example, if a valid link target is hovered over
 * when making a link, the end node fills with colour and
 * the outline bounces to show this state to the user.
 * Likewise, when previewing existing links, the parent
 * pane in a link chain is shown with a larger end node so
 * that the user can tell where a particular link or
 * buffer is originating from.
 *
 *                         - - - 
 *
 * Note that many CSS properties are interrelated in this
 * section. Be careful when changing things to also update
 * dependent properties (such as size and position on end
 * nodes).
 * ======================================================= */

/* Creates a bouncing effect for the ring around the line's end node. */
@-webkit-keyframes bounceOutline {
  0%   { box-shadow: 0 0 0 0px rgb(250, 250, 250), 0 0 0 2px rgb(0, 173, 255); }
  100% { box-shadow: 0 0 0 3px rgb(250, 250, 250), 0 0 0 5px rgb(0, 173, 255); }
}

.link-line-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 4;
}

.link-line-container {
  position: absolute;
  left: -2px;
  width: 4px;
  border-radius: 10px;
  background: rgb(0, 173, 255);
  -webkit-transform-origin: center top;
  -webkit-backface-visibility: hidden;
  -webkit-perspective: 1000;
  opacity: 0;
}

.display-container.opening {
  transition: opacity 100ms ease-in !important;
}

.display-container.closing {
  transition: height 300ms ease-in, opacity 200ms ease-in !important;
  opacity: 0 !important;
}

.link-line-container :first-child,
.link-line-container :last-child {
  position: absolute;

  /* A hack to make positioning relative to size. Just change
   * font-size to alter width/height, and it will automaticaly
   * remain centered because of the left: -0.5em rule. */
  font-size: 26px;
  left: -0.5em;
  width: 1em;
  height: 1em;
  margin: 0 50% 0 50%;

  border-radius: 1000px;
  border: 10px solid rgb(250, 250, 250);
  box-shadow: 0 0 0 2px rgb(0, 173, 255);
  background-color: rgb(0, 173, 255);

  transition: width        300ms ease-in, height 300ms ease-in,
              left         300ms ease-in, top    300ms ease-in,
              border-width 300ms ease-in;
}

.link-line-container :first-child {
  top: -0.5em;
}

.link-line-container :last-child {
  bottom: -0.5em;
}

.link-line-container.link-container :first-child {
  display: none;
}

.link-container :last-child {
  border-width: 15px;
}

.link-container :last-child,
.link-line-container .link-endpoint {
  font-size: 40px;
  z-index: 2;
}

.link-line-container .link-endpoint {
  border-width: 5px;
  -webkit-animation: bounceOutline 150ms linear 100ms 2 alternate;
}

.link-line-container.display-container .link-endpoint.invalid-target {
  border-width: 15px;
  -webkit-animation: none;
}

.display-container :last-child:not(.link-endpoint) {
  -webkit-animation: bounceOutline 150ms linear 100ms 2 alternate;
}

.display-container :last-child:not(.link-endpoint).invalid-target {
  -webkit-animation: none;
}

.link-nexus {
  position: absolute;
  font-size: 26px;
  left: -0.5em;
  top: -0.5em;
  width: 1em;
  height: 1em;
  border-radius: 1000px;
  background: rgb(250, 250, 250);
  border: 2px solid rgba(0, 173, 255, 0.8);
  transition: width   300ms ease-out, height 300ms ease-out,
              left    300ms ease-out, top    300ms ease-out,
              opacity 150ms ease-out 50ms;
  opacity: 0;
  z-index: 1;
}

.link-nexus.link-endpoint {
  font-size: 40px;
}

.link-nexus.visible {
  font-size: 100px;
  opacity: 1;
  transition: width   300ms ease-out, height 300ms ease-out,
              left    300ms ease-out, top    300ms ease-out,
              opacity 100ms ease-out;
}

/* =======================================================
 *            Visual Elements - Miscellaneous
 *
 * Various visual styles that don't fit better in another
 * group. The .ping styles, for example, are used for an
 * editor command.
 * ======================================================= */

/* An empty animation that's added to the .ping
 * element so that completion can be listened for by JS. */
@-webkit-keyframes pingPlaceholder {
  0%   { opacity: 1; }
  100% { opacity: 1; }
}

@-webkit-keyframes ping {
  0%   { -webkit-transform: scale(0); opacity: 1; }
  40%  { opacity: 1; }
  100% { -webkit-transform: scale(1); opacity: 0; }
}

/* Animation duration should be as long as longest
 * pseudo-element animation. */
.ping {
  position: absolute;
  -webkit-animation: pingPlaceholder 1150ms;
  z-index: 3;
}

.ping::before,
.ping::after {
  content: "";
  position: absolute;
  width: 100px;
  height: 100px;
  left: -50px;
  top: -50px;
  display: block;
  border-radius: 100%;
  border: 5px solid rgb(0, 173, 255);
  opacity: 0;
  -webkit-transform: scale(0);
}

.ping::before {
  -webkit-animation: ping 850ms ease-out;
}

.ping::after {
  -webkit-animation: ping 850ms ease-out 300ms;
}

/* =======================================================
 *                      Ace Editor
 *
 * Styles Ace editor components and syntax highlighting.
 * ======================================================= */

.input-area.centered-cursors .ace_cursor {
  height: 1.4em !important; /* Overrides the style set by JS. */
  margin-top: -0.2em;
}

.input-area .ace_gutter {
  background: none;
}

.filetype-mkd .ace_line_group * {
  color: #000;
}

.filetype-mkd .ace_line_group .ace_invisible {
  color: #ccc;
}

.filetype-mkd .ace_line_group .ace_strong,
.filetype-mkd .ace_line_group .ace_heading {
  font-weight: bold;
}

.filetype-mkd .ace_emphasis {
  font-style: italic;
}

