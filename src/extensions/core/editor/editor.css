/* =======================================================
 *                        General
 * ======================================================= */

html, body {
  overflow: hidden;
  background: rgb(250, 250, 250);
}

body {
  height: 100%;
  width: 100%;
}

.disable-transition {
  transition: none !important;
}

:focus {
  outline-color: transparent;
  outline-style: none;
}

/* =======================================================
 *                        Editor
 *
 * All panes exist within this element, which takes up the
 * full size of the screen and does not scroll.
 * ======================================================= */

#editor {
  position: relative;
  white-space: nowrap;
  height: 100%;
  width: 100%;
  overflow: hidden;
}

/* =======================================================
 *                         Panes
 *
 * Panes hold content of various types within the editor
 * (mostly text), and more than one can be open at a time.
 * If more than one pane is open at once, then each pane
 * will be divided by a splitter element.
 *
 * Because panes use percentage width/heights, surrounding
 * elements are offset into borders which are incorporated
 * into the pane's size using box-sizing: border-box. This
 * preserved full fluidity, with the downside that it is
 * difficult to work with. Somewhat regretably, CodeMirror
 * does not seem to like the much nicer flexbox layout.
 *
 *                         - - - 
 *
 * NOTE: Panes are the most interacted with of any element
 * in the application. As such, the UI should be fluid and
 * stay out of the user's way.
 * ======================================================= */

.pane {
  position: relative;
  width: 100%;
  height: 100%;
  border-width: 0;
  border-style: solid;
  border-color: transparent;
  -webkit-user-select: none;
}

.pane.input {
  font-size: 17px;
  line-height: 1.6;
  font-family: Cousine;
}

.pane.preview .preview-area {
  height: 100%;
  white-space: pre-wrap;
  overflow-y: auto;
}

#editor > .pane {
  position: relative;
  display: inline-block;
  vertical-align: top;
  box-sizing: border-box;
  background: rgb(250, 250, 250);
  outline: 0;
}

/* Create room for horizontal splitters. */
#editor > .pane:not(:last-child) {
  border-right-width: 5px;
}

/* Create room for vertical splitters. */
.vertical-splitter-pane > .pane:not(:last-child) {
  border-bottom-width: 6px;
}

.vertical-splitter-pane > .pane {
  position: relative;
  box-sizing: border-box;
}

/* Create room for the info bar. */
#editor > .pane:not(.vertical-splitter-pane),
.vertical-splitter-pane > .pane {
  border-top-width: 29px;
}

/* Create room for the info bar. */
.vertical-splitter-pane .pane ~ .pane {
  border-top-width: 24px;
}

.pane:not(.vertical-splitter-pane) > :first-child {
  padding: 0 15px;
}


/* =======================================================
 *                      Command Bar
 *
 * The command bar exists at the bottom of a pane, and is
 * there to accept user input (commands). It is not
 * persistant, and only exists when the user toggle it.
 *
 * It is shifted to the left by 5px in some cases to make
 * it line up with the edge of the adjacent pane (to make
 * up for the splitter offset).
 * ======================================================= */

.command-bar {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  min-height: 1.6em;
  padding: 2px 5px 2px 25px;
  border-width: 5px 0 0 0;
  border-style: solid;
  border-color: #000;
  outline: none;
  font-size: 20px;
  font-family: Consolas;
  font-weight: bold;
  line-height: 1.6;
  white-space: normal;
  background: rgb(250, 250, 250);
  z-index: 1;
}

.command-bar::before {
  content: ">";
  position: absolute;
  font-size: 20px;
  line-height: 1.6em;
  top: 0px;
  left: 5px;
}

/* Shift it over to compensate for horizontal splitter. */
#editor > .pane:not(:first-child) .command-bar {
  left: -5px;
}

/* =======================================================
 *                        Splitters
 *
 * Splitters exists between panes and can be dragged to
 * resize the panes on either side. There are two types of
 * splitters: vertical and horizontal. Vertical splitters
 * are only present in vertical split panes.
 *
 * This implementation is particularly hack-ish, as it
 * requires the pane next to the splitter to have a border
 * equal in width to the splitter's size. The splitter is
 * then offset into this space. This method is, for now,
 * necessary, as the pane implementation is percentage
 * based.
 * ======================================================= */

.splitter {
  position: relative;
  display: inline-block;
  border-color: black;
  border-style: solid;
  background: rgb(250, 250, 250);
  box-sizing: content-box;
}

.splitter-horizontal {
  width: 5px;
  height: 100%;
  margin-left: -5px;
  border-width: 0 0 0 1px;
  vertical-align: top;
  cursor: e-resize;
  transition: width       500ms ease-in,
              margin-left 500ms ease-in,
              opacity     200ms ease-in 300ms;
  z-index: 1;
}

.splitter-vertical {
  width: 100%;
  height: 5px;
  display: block;
  margin-top: -6px;
  margin-left: -5px;
  padding-right: 5px;
  border-width: 1px 0 0;
  cursor: n-resize;
  transition: height     500ms ease-in,
              margin-top 500ms ease-in,
              opacity    200ms ease-in 300ms;
  z-index: 2;
}

/* =======================================================
 *                        Title Bar
 *
 * The title bar sits at the top of each pane, and both
 * displays the title of the pane's buffer and houses the
 * link bar.
 * ======================================================= */

.title-bar {
  position: absolute;
  top: -24px;
  height: 24px;
  width: 100%;
  box-sizing: content-box;
  background: rgb(250, 250, 250);
  z-index: 1;
}

.title-bar .title {
  position: absolute;
  width: 100%;
  font-size: 17px;
  line-height: 1.6;
  font-family: Cousine;
  line-height: 24px;
  text-align: center;
  vertical-align: middle;
}

/* =======================================================
 *                        Link Bar
 *
 * The link bar exists within the info bar, floated to the
 * right side. It contains buttons and icons related to
 * linking panes together, including the status light and
 * link icon.
 * ======================================================= */

.link-bar {
  height: 100%;
  float: right;
  display: flex;
  align-items: center;
  z-index: 3;
}

.link-bar > * {
  margin-right: 10px;
  z-index: 3;
}

.status-light {
  height: 14px;
  width: 14px;
  border-radius: 100px;
  transition: box-shadow 500ms ease-in,
              background-color 500ms ease-in;
  background: rgb(200, 200, 200);
}

.pane:focus .status-light,
.pane.focus .status-light {
  background: rgb(0, 173, 255);  
  box-shadow: inset 0px 1px 0px 0px rgba(250, 250, 250, 0.2),
                    0px 0px 3px 2px rgba(0, 173, 255, 0.2); 
}

.link-button {
  background: url("src/assets/images/link-icon.png");
  width: 22px;
  height: 10px;
  opacity: 0.3;
  pointer-events: none;
}

.pane.has-link .link-button {
  opacity: 1;
  pointer-events: auto;
}

/* =======================================================
 *               Panes - Opening and Closing 
 *
 * When panes are opened and closed, they are animated.
 * Styles relating to this are listed below.
 *
 * It's in this part that all the hacky techniques from
 * the other sections really stand out -- for smooth
 * transitions to be really possible, all the odd borders
 * and offsets need to be transitioned as well, and you
 * can see that here.
 * ======================================================= */
.splitter-horizontal {
  transition: width       500ms ease-in,
              margin-left 500ms ease-in,
              opacity     200ms ease-in 300ms;
}

.splitter-vertical {
  transition: height     500ms ease-in,
              margin-top 500ms ease-in,
              opacity    200ms ease-in 300ms;
}

#editor > .pane {
  transition: width              500ms cubic-bezier(0.3, 0.4, 0.3, 1),
              opacity            300ms ease-in,
              border-right-width 300ms ease-in;
}

.vertical-splitter-pane > .pane {
  transition: height              500ms cubic-bezier(0.3, 0.4, 0.3, 1),
              opacity             300ms ease-in,
              border-top-width    300ms ease-in,
              border-bottom-width 300ms ease-in;
}

.title-bar {
  transition: top 300ms ease-in;
}

.pane.closing {
  opacity: 0;
}

#editor > .pane.closing {
  width: 0 !important; /* Override inline style set with js. */
  border-right-width: 0;
}

.vertical-splitter-pane > .pane.closing:first-child + .splitter + .pane {
  border-top-width: 29px;
}

.vertical-splitter-pane > .pane.closing {
  height: 0 !important; /* Override inline style set with js. */
  border-top-width: 0;
  border-bottom-width: 0;
}

.vertical-splitter-pane > .pane.closing > .title-bar {
  top: 0;
}

.splitter-horizontal.closing {
  width: 0;
  opacity: 0;
  margin-left: 0;
}

.splitter-vertical.closing {
  height: 0;
  opacity: 0;
  margin-top: 0; 
}

/* Zero out values without a transition. The correct values will
 * be transitioned back in when the .opening class is removed. */

.pane.opening {
  transition: none !important;
  opacity: 0;
}

#editor > .pane.opening {
  width: 0;
}

.vertical-splitter-pane > .pane.opening {
  height: 0;
  border-top-width: 0;
  border-bottom-width: 0;
}

.vertical-splitter-pane > .pane.opening > .title-bar {
  transition: none;
  top: 0;
}

/* =======================================================
 *                        Linking
 *
 * Panes can be linked together so that they both work
 * with the same buffer. When creating or viewing a link,
 * link lines are used to show the association between
 * panes. End nodes on a link line (created using :::before
 * and :::after pseudo-elements) show the direction and
 * state of a link.
 *
 * For example, if a valid link target is hovered over
 * when making a link, the end node fills with colour and
 * the outline bounces to show this state to the user.
 * Likewise, when previewing existing links, the parent
 * pane in a link chain is shown with a larger end node so
 * that the user can tell where a particular link or
 * buffer is originating from.
 *
 *                         - - - 
 *
 * Note that many CSS properties are interrelated in this
 * section. Be careful when changing things to also update
 * dependent properties (such as size and position on end
 * nodes).
 * ======================================================= */

/* Creates a bouncing effect for the ring around the line's end node. */
@-webkit-keyframes bounceOutline {
  0%   { box-shadow: 0 0 0 0px rgb(250, 250, 250), 0 0 0 2px rgb(0, 173, 255); }
  100% { box-shadow: 0 0 0 3px rgb(250, 250, 250), 0 0 0 5px rgb(0, 173, 255); }
}

.link-line-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.link-line {
  position: absolute;
  width: 4px;
  background: rgb(0, 173, 255);
  -webkit-transform-origin: center top;
  border-radius: 10px;
  box-shadow: 0px 0px 1px 0px rgba(0, 173, 255, 0.5); 
  z-index: 4;
}

/* Position dimensions are calculated as follows:
 *
 * top:    -(width / 2)
 * bottom: -(width / 2)
 * right:  -(width - linewidth) / 2
 * 
 * Having box-sizing: border-box set is important, as
 * that is how the line's end node is resized when hovering
 * over a valid link target. */
.link-line::after,
.link-line-display::before {
  content: "";
  position: absolute;
  right: -18px;
  width: 40px;
  height: 40px;
  border-radius: 1000px;
  border: 15px solid rgb(250, 250, 250);
  box-shadow: 0 0 0 2px rgb(0, 173, 255);
  background-color: rgb(0, 173, 255);
  transition: border-width 300ms ease-in;
}

.link-line::before {
  top: -20px;
}

.link-line::after {
  bottom: -20px;
}

/* Link display line nodes are smaller. */
.link-line-display::before,
.link-line-display::after {
  width: 26px;
  height: 26px;
  right: -11px;
  border-width: 10px;
  transition: none;
}

.link-line-display::before {
  top: -13px;
}

.link-line-display::after {
  bottom: -13px;
}

/* Link endpoints should be larger. */
.link-line.link-endpoint::after {
  right: -18px;
  width: 40px;
  height: 40px;
  border-width: 5px;
}

.link-line.link-endpoint::after {
  bottom: -20px;
  -webkit-animation: bounceOutline 150ms linear 100ms 2 alternate; /* Add the animation. */
}

/* =======================================================
 *                       CodeMirror
 *
 * Manages the styling of any CodeMirror elements as well
 * as any (default) theme-related styles.
 * ======================================================= */

.CodeMirror {
  position: relative;
  height: 100%;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  font-size: inherit;
  line-height: inherit;
  font-family: inherit;
  background: none;
}

.CodeMirror ::-webkit-scrollbar {
  display: none;
}

/* Use a gradient to make a strikethrough. This allows the line
 * thickness to be proportional to the text size. */
.cm-strikethrough {
  background: -webkit-linear-gradient(top, 
    transparent 0%,
    transparent 47%,
    currentColor 48%,
    currentColor 52%,
    transparent 53%,
    transparent 100%);
}

/* No strikethrough on the formatting characters. */
.cm-formatting-strikethrough {
  background: none;
}

.cm-formatting-strong,
.cm-formatting-em { 
  font-weight: normal;
  font-style: normal;
}

.cm-header {
  font-weight: bold;
}

/* These look odd if styled, since the text that they actually
 * affect (in markdown) isn't styled as well. */
.cm-header.cm-header-underline-1,
.cm-header.cm-header-underline-2 {
  font-size: 1em;
  font-weight: normal;
}

.cm-header   { color: #000 !important; }
.cm-header-1 { font-size: 2.0em; }
.cm-header-2 { font-size: 1.9em; }
.cm-header-3 { font-size: 1.8em; }
.cm-header-4 { font-size: 1.6em; }
.cm-header-5 { font-size: 1.4em; }
.cm-header-6 { font-size: 1.2em; }
