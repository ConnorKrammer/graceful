# Todo:

###### Urgent:
 - None right now.
    
###### Bugs:
 - None right now.

###### Short-term:
 - Make pane animations more consistent when opening or closing new panes.
 
 - Add `<hr />` elements back into the markdown subset used for highlighting 
   documents, and use something like the following for its background:

   ```
   content: '-----------------------------------------------------------------------------------------------------------------------'; /* But use asterisks instead for those kinds of dividers. */
   display: inline;
   max-width: 100%;
   position: absolute;
   overflow: hidden;
   left: 5px;
   width: 100%;
   white-space: nowrap;
   opacity: 0.3;
   ```
 - Fix the line-wrapping used for preview panes (it shouldn't split words).
 
 - Don't allow formatting within code blocks in markdown mode.
 
 - In general, re-think what the markdown mode implements. Optionally allow 
   the different items to be configured. (Only if it has a speed impact.)
 
 - Convert tabs to spaces, and allow an option for showing visible 
   whitespace.
 
 - Don't auto-indent lines.
 
 - Re-organize preferences.
 
###### CEF-related:
 - Expose more of the browser native functions to javascript.
 	- See [here] [1] for CEF documentation.
    
 - Allow firing of native key events via javascript. This would allow form 
   auto-fill, chainable key combinations, backspacing, and moving through 
   text, all without interacting with the horrible setRange/getRange 
   nonsense that is currently required. Does bring up some security 
   concerns, however.
 	- See [here] [2] for the key event reference.
    - Also see [here] [3] for the SendKeyEvent reference.
    
 - Make the browser cache location more portable.
 	- See [here] [4] for a pull request that makes progress on this item.
    - See [here] [5] for the `cache_path` application setting.
    
 - Expose a custom context menu API through javascript.
 	- See [here] [6] for the ContextMenuHandler reference.
    - See [this] [7] for how to get the menu handler from a CefClient 
      instance.
 
###### Long-term:
 - Allow a way to get panes by physical order, not order added. Some 
   suggestions include:
 	- (column, row) notation
    - Counting from top to bottom and left to right
    - A two digit variation of (column, row), where the first digit is the 
      column and the second digit is the row. 
      
 - User prompts. This is important for requesting that unsaved changes be 
   saved before quiting the application.
   
 - Make opening and saving files work with absolute filepaths again.
 
 - Allow output from the command bar, much in the way that Vim handles it.
 
 - When creating a vertical or horizontal split, insert the split 
   immediately after the focused pane.
 	- If the pane is larger than ~80% of the total editor size, simply 
      divide the correct dimension in half without resizing other panes.
 	- One option might be to allow the user to specify the exact place that 
      the new pane would be inserted to, using the same coordinate system as 
      proposed above. If left unspecified, the default would be to use the 
      focused pane.
    
 - Implement automatic file backups.
 	- The target here is for the ease of mind that Google Drive grants.

 - Allow the user more configuration options, such as tab width, maximum 
   number of panes (columns and rows), autosave frequency, etc. *These 
   should be smart defaults that ideally would never be changed except by 
   advanced users with particular needs.*
 
 - Spell checking.
 
 - Allow scrolling past the end of a file.
 
 - Smarter auto-indent.
 
 - Smooth scrolling.
 	- This will require looking into how Brackets does it (if they do at 
      all), and whether CEF allows that sort of thing to be configured.
     
 - Implement user-configureable key commands.
 
 - Allow links to be rearranged by dragging around the nodes shown during a 
   global link preview.
 	- Some significant thought will have to go into the UX here. What 
      functionality is most needed/desired, and how can we make that as 
      simple as possible?
     
 - Create a C++ binding that allows execution of shell commands. The main 
   usage here would be for utilities that expand the app in ways difficult 
   or slow to do in Javascript.
 	- This would also allow certain tasks to be delegated to sub-processes, 
      essentially enabling a sort of multi-threading.
 	- It would also open doors to application scripting, though what that 
      would even be useful for would need to be considered.

 - Allow the user to save and restore custom pane layouts.
 
 - Add in session management.
 
 - Overall, implement performance improvements. The whole damn thing should 
   be as smooth as silk, and faster than you can think. This task will never 
   really be finished.
 
 - Switch from the Q promise library over to the [Bluebird] [8] promise 
   library. It has better performance and debugging capabilities.
   
 - Use RequireJS for loading modules instead of yepnope. (The project has 
   outgrown it to an extent.)
     
###### References
[1]: http://magpcss.org/ceforum/apidocs3/ "CEF C++ documentation"

[2]: http://magpcss.org/ceforum/apidocs3/projects/%28default%29/_cef_key_event_t.html

[3]: http://magpcss.org/ceforum/apidocs3/projects/%28default%29/CefBrowserHost.html#SendKeyEvent "SendKeyEvent - Reference"

[4]: https://github.com/adobe/brackets-shell/pull/333 "Brackets pull request"

[5]: http://magpcss.org/ceforum/apidocs3/projects/%28default%29/_cef_settings_t.html#cache_path "Cache path application setting - Reference"

[6]: http://magpcss.org/ceforum/apidocs3/projects/%28default%29/CefContextMenuHandler.html "ContextMenuHandler - Reference"

[7]: http://magpcss.org/ceforum/apidocs3/projects/%28default%29/CefClient.html#GetContextMenuHandler%28%29 "GetContextMenuHandler - Reference"

[8]: https://github.com/petkaantonov/bluebird "Bluebird - GitHub repository"